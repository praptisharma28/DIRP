/*
 * Steganography utility to hide messages into cover files
 * Copyright (c) Samir Vaidya (mailto:syvaidya@gmail.com)
 */


import org.apache.tools.ant.filters.FixCrLfFilter
import org.apache.tools.ant.filters.ReplaceTokens
import org.apache.tools.ant.taskdefs.condition.Os

import java.text.SimpleDateFormat

plugins {
    id 'java'
    id 'jacoco'
    id 'nebula.deb' version '8.4.1'
    id 'nebula.rpm' version '8.4.1'
}

String projectName = 'DIRP'
File distBaseDir = file("${buildDir}/${distsDirName}/package")
String currYear = new SimpleDateFormat('yyyy').format(new Date())
def filterTokens = [
        'app.name'    : projectName,
        'app.version' : project.version,
        'author.name' : project.author,
        'author.mail' : project.authorMail,
        'homepage.url': project.homepageUrl,
        'time.year'   : currYear
]

repositories {
    mavenCentral()
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
            exclude 'com/DIRP/desktop/plugin/dctlsb/**'
            exclude 'com/DIRP/desktop/plugin/dwtkim/**'
            exclude 'com/DIRP/desktop/plugin/dwtxie/**'
            exclude 'com/DIRP/desktop/plugin/template/dct/**'
            exclude 'com/DIRP/desktop/util/dct/**'
        }
        resources {
            exclude 'com/DIRP/desktop/resource/i18n/DctLSB*'
            exclude 'com/DIRP/desktop/resource/i18n/DCTPlugin*'
            exclude 'com/DIRP/desktop/resource/i18n/DWTKim*'
            exclude 'com/DIRP/desktop/resource/i18n/DWTXie*'
            exclude 'com/DIRP/desktop/resource/i18n/*_ja.properties'
        }
    }
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.0'
    testImplementation 'org.mockito:mockito-core:4.8.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:4.8.0'

    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.0'
}

compileJava {
    sourceCompatibility = '8'
    targetCompatibility = '8'
}

processResources {
    filesMatching('**/*.properties') {
        filter(ReplaceTokens, tokens: filterTokens)
    }
}

jar {
    archiveFileName = 'DIRP.jar'
    manifest {
        attributes([
                'Name'                  : projectName,
                'Main-Class'            : 'com.DIRP.desktop.DIRP',
                'Implementation-Version': project.version,
                'Built-By'              : project.author
        ])
    }
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = false
        csv.required = false
        html.required = true
    }
}

jacocoTestCoverageVerification {
    dependsOn test
    violationRules {
        rule {
            limit {
                minimum = 0.9
            }
        }
    }
}

javadoc {
    title "${projectName} v${version}"
    exclude 'com/DIRP/desktop/plugin/**'
    options.bottom "Copyright &copy; 2007-${currYear} ${author}. All Rights Reserved."
    options.links project.jdkDocsUrl
    options.addStringOption('Xdoclint:none', '-quiet')
}

tasks.register("run", JavaExec) {
    dependsOn jar
    classpath = files(tasks.jar)
}

tasks.register("distBase", Copy) {
    dependsOn jar
    destinationDir = distBaseDir

    from('.') {
        include 'LICENSE'
    }
    from('src/main/dist') {
        exclude '**/*.sh'
        filesNotMatching('**/*.ico') {
            filter(ReplaceTokens, tokens: filterTokens)
        }
    }
    from('src/main/dist') {
        include '**/*.sh'
        filter(ReplaceTokens, tokens: filterTokens)
        fileMode 0755
    }
    from(tasks.jar) {
        into 'lib'
    }
}

tasks.register("distBin", Zip) {
    dependsOn distBase
    from distBaseDir
    into project.name + '-' + project.version
}

tasks.register("distWin", Exec) {
    dependsOn distBase

    onlyIf {
        Os.isFamily(Os.FAMILY_WINDOWS)
    }

    doFirst {
        copy {
            from 'artifacts/installer.iss'
            into "${buildDir}/generated"
            filter(ReplaceTokens, tokens: [
                    'AppName'    : projectName,
                    'AppVersion' : project.version,
                    'AuthorName' : project.author,
                    'HomepageUrl': project.homepageUrl,
                    'AppDir'     : distBaseDir.path,
                    'DistDir'    : project.buildDir.path + '\\distributions'
            ])
        }
    }

    workingDir project.buildDir
    commandLine 'cmd', '/c', 'iscc', 'generated\\installer.iss', '/Q'
}

tasks.register("distDeb", Deb) {
    dependsOn distBase
    packageName = project.name
    summary = projectName
    release = 1
    packageGroup = 'utils'
    maintainer = "${author} (${authorMail})"
    url = project.homepageUrl
    requires('default-jre').or('java8-runtime')

    into '/usr/share'
    from(distBaseDir) {
        into project.name
        include 'lib/**'
    }
    from(distBaseDir) {
        into project.name
        include 'DIRP.sh'
        rename('DIRP.sh', 'DIRP')
        filter(FixCrLfFilter, eol: FixCrLfFilter.CrLf.newInstance('lf'))
        fileMode 0755
    }
    from('artifacts') {
        into 'applications'
        include 'DIRP.desktop'
        filter(FixCrLfFilter, eol: FixCrLfFilter.CrLf.newInstance('lf'))
        filter(ReplaceTokens, tokens: filterTokens)
    }
    from('artifacts') {
        into 'icons/hicolor/scalable/apps'
        include 'DIRP.svg'
    }
    from(distBaseDir) {
        into 'doc/' + project.name
        include 'README'
    }
    from('artifacts') {
        into 'doc/' + project.name
        include 'copyright'
        filter(FixCrLfFilter, eol: FixCrLfFilter.CrLf.newInstance('lf'))
        filter(ReplaceTokens, tokens: filterTokens)
    }

    link('/usr/bin/DIRP', '/usr/share/DIRP/DIRP')
}

tasks.register("distRpm", Rpm) {
    dependsOn distBase
    packageName = project.name
    summary = projectName
    release = 1
    packageGroup = 'utils'
    packager = "${author} (${authorMail})"
    url = project.homepageUrl
    user = 'root'
    license = 'GPLv2'
    buildHost = ''
    os = LINUX
    requires('java', '1.8', GREATER | EQUAL)

    into '/usr/share'
    from(distBaseDir) {
        into project.name
        include 'lib/**'
    }
    from(distBaseDir) {
        into project.name
        include 'DIRP.sh'
        rename('DIRP.sh', 'DIRP')
        filter(FixCrLfFilter, eol: FixCrLfFilter.CrLf.newInstance('lf'))
        fileMode 0755
    }
    from('artifacts') {
        into 'applications'
        addParentDirs false
        include 'DIRP.desktop'
        filter(FixCrLfFilter, eol: FixCrLfFilter.CrLf.newInstance('lf'))
        filter(ReplaceTokens, tokens: filterTokens)
    }
    from('artifacts') {
        into 'icons/hicolor/scalable/apps'
        addParentDirs false
        include 'DIRP.svg'
    }
    from(distBaseDir) {
        into 'doc/' + project.name
        addParentDirs false
        include 'LICENSE'
        include 'README'
        filter(FixCrLfFilter, eol: FixCrLfFilter.CrLf.newInstance('lf'))
    }

    link('/usr/bin/DIRP', '/usr/share/DIRP/DIRP')
}

tasks.register("dist") {
    dependsOn distBin, distWin, distDeb, distRpm
}
